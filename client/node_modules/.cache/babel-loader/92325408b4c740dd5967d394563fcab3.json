{"ast":null,"code":"import _classCallCheck from \"/home/HDD/Projects/React/calender/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/HDD/Projects/React/calender/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/HDD/Projects/React/calender/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/HDD/Projects/React/calender/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/HDD/Projects/React/calender/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/HDD/Projects/React/calender/src/components/dashboard/Calender.js\";\nimport React, { Component } from 'react';\nimport DateObj from '../date';\nimport { getDateProps } from '../../utils/date';\n\nvar Calender =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Calender, _Component);\n\n  function Calender() {\n    _classCallCheck(this, Calender);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Calender).call(this));\n  } // Start is the first day of the month, end is the last.\n  // Last is the number of days the prior month\n\n\n  _createClass(Calender, [{\n    key: \"render\",\n    value: function render() {\n      var epochStart, epochEnd, todaysEvents; //If the day of the week falls on the first day of the month, create a Date\n      // object, otherwise create an empty table data object\n\n      var tableRow = [];\n      var tableRows = [];\n      var counter = 0; //Work out if its the current month, and if so provide today's date\n\n      var isThisMonth = false;\n      var dateFunc = getDateProps();\n\n      if (this.props.year === dateFunc.year && this.props.month === dateFunc.month) {\n        isThisMonth = true;\n        var todaysDate = dateFunc.todaysDate;\n      }\n\n      for (var i = 1; i < 44; i++) {\n        if (tableRow.length > 6) {\n          //Assign all dates to a row\n          tableRows.push(React.createElement(\"tr\", {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36\n            },\n            __self: this\n          }, tableRow));\n          tableRow = [];\n        }\n\n        ;\n\n        if (i === this.props.start) {\n          //Check if the correct first day of the week\n          counter++; //then activate the counter for the loop below\n        }\n\n        if (counter >= 1 && counter <= this.props.end) {\n          //Populate with this month's dates\n          var date = new Date(this.props.year + \"-\" + this.props.month + \"-\" + counter);\n          var dayEvents = [];\n          var dayToday = false; //Add habits that are supposed to exist on that day to an array and then generate an object for it. \n\n          if (habits) {\n            var dateEpoch = Math.floor(date / 1000); //Check within range for a user's habits\n\n            if (dateEpoch >= epochStart && dateEpoch <= epochEnd) {\n              var events = [];\n\n              for (var _i = 0; _i < habits.length; _i++) {\n                //habitStart\n                var habitStart = new Date(habits[_i].dateCreated);\n                var habitEpochStart = Math.floor(habitStart / 1000); //habitEnd\n\n                var habitEnd = new Date(habits[_i].dateToFinish);\n                var habitEpochEnd = Math.floor(habitEnd / 1000);\n\n                if (dateEpoch >= habitEpochStart && dateEpoch <= habitEpochEnd) {\n                  events.push(habits[_i]);\n                }\n              }\n\n              dayEvents = events;\n            }\n          }\n\n          if (isThisMonth && counter === todaysDate) {\n            if (habits) {\n              todaysEvents = dayEvents;\n              dayToday = true;\n            }\n          }\n\n          tableRow.push(React.createElement(DateObj, {\n            key: i,\n            date: date,\n            day: counter,\n            dayToday: dayToday,\n            dayEvents: dayEvents,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }));\n          counter++;\n        } else if (counter > this.props.end) {\n          //Start again, with the dates for the next month\n          tableRow.push(React.createElement(\"td\", {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          }));\n          counter++;\n        } else {\n          //For dates that exist in the previous month.\n          tableRow.push(React.createElement(\"td\", {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }));\n        }\n\n        ;\n      }\n\n      ;\n\n      if (!this.props.habits.todaysHabits && todaysEvents) {\n        this.passHabits(todaysEvents);\n      }\n\n      return React.createElement(\"div\", {\n        id: \"calender\",\n        className: \"container-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        className: \"table\",\n        id: \"calender\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        id: \"daysOfWeek\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"M\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"T\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"W\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"T\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"F\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"S\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"S\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, tableRows)));\n    }\n  }]);\n\n  return Calender;\n}(Component);\n\n;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    habits: state.habits\n  };\n};\n\nexport default connect(mapStateToProps, {\n  passTodaysHabits: passTodaysHabits\n})(Calender);","map":{"version":3,"sources":["/home/HDD/Projects/React/calender/src/components/dashboard/Calender.js"],"names":["React","Component","DateObj","getDateProps","Calender","epochStart","epochEnd","todaysEvents","tableRow","tableRows","counter","isThisMonth","dateFunc","props","year","month","todaysDate","i","length","push","start","end","date","Date","dayEvents","dayToday","habits","dateEpoch","Math","floor","events","habitStart","dateCreated","habitEpochStart","habitEnd","dateToFinish","habitEpochEnd","todaysHabits","passHabits","mapStateToProps","state","connect","passTodaysHabits"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,SAASC,YAAT,QAA6B,kBAA7B;;IAEMC,Q;;;;;AAEJ,sBAAc;AAAA;;AAAA;AAEb,G,CAEH;AACA;;;;;6BAES;AAEL,UAAIC,UAAJ,EAAgBC,QAAhB,EAA0BC,YAA1B,CAFK,CAIR;AACG;;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,OAAO,GAAG,CAAd,CARK,CAUL;;AACA,UAAIC,WAAW,GAAG,KAAlB;AACA,UAAIC,QAAQ,GAAGT,YAAY,EAA3B;;AAEA,UAAG,KAAKU,KAAL,CAAWC,IAAX,KAAoBF,QAAQ,CAACE,IAA7B,IAAqC,KAAKD,KAAL,CAAWE,KAAX,KAAqBH,QAAQ,CAACG,KAAtE,EAA4E;AACxEJ,QAAAA,WAAW,GAAG,IAAd;AACA,YAAIK,UAAU,GAAGJ,QAAQ,CAACI,UAA1B;AACH;;AAED,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,YAAGT,QAAQ,CAACU,MAAT,GAAkB,CAArB,EAAwB;AAAE;AAC1BT,UAAAA,SAAS,CAACU,IAAV,CAAe;AAAI,YAAA,GAAG,EAAEF,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAaT,QAAb,CAAf;AACAA,UAAAA,QAAQ,GAAG,EAAX;AACC;;AAAA;;AACD,YAAGS,CAAC,KAAK,KAAKJ,KAAL,CAAWO,KAApB,EAA2B;AAAE;AACzBV,UAAAA,OAAO,GADgB,CACI;AAC9B;;AAED,YAAGA,OAAO,IAAI,CAAX,IAAgBA,OAAO,IAAI,KAAKG,KAAL,CAAWQ,GAAzC,EAA8C;AAAE;AAEhD,cAAIC,IAAI,GAAG,IAAIC,IAAJ,CAAS,KAAKV,KAAL,CAAWC,IAAX,GAAkB,GAAlB,GAAwB,KAAKD,KAAL,CAAWE,KAAnC,GAA2C,GAA3C,GAAiDL,OAA1D,CAAX;AACA,cAAIc,SAAS,GAAG,EAAhB;AACA,cAAIC,QAAQ,GAAG,KAAf,CAJ8C,CAM9C;;AACA,cAAGC,MAAH,EAAW;AACT,gBAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWP,IAAI,GAAG,IAAlB,CAAhB,CADS,CAET;;AACA,gBAAGK,SAAS,IAAItB,UAAb,IAA2BsB,SAAS,IAAIrB,QAA3C,EAAoD;AAClD,kBAAIwB,MAAM,GAAG,EAAb;;AACA,mBAAI,IAAIb,EAAC,GAAG,CAAZ,EAAeA,EAAC,GAAGS,MAAM,CAACR,MAA1B,EAAkCD,EAAC,EAAnC,EAAuC;AACrC;AACA,oBAAIc,UAAU,GAAG,IAAIR,IAAJ,CAASG,MAAM,CAACT,EAAD,CAAN,CAAUe,WAAnB,CAAjB;AACA,oBAAIC,eAAe,GAAGL,IAAI,CAACC,KAAL,CAAWE,UAAU,GAAG,IAAxB,CAAtB,CAHqC,CAIrC;;AACA,oBAAIG,QAAQ,GAAG,IAAIX,IAAJ,CAASG,MAAM,CAACT,EAAD,CAAN,CAAUkB,YAAnB,CAAf;AACA,oBAAIC,aAAa,GAAGR,IAAI,CAACC,KAAL,CAAWK,QAAQ,GAAG,IAAtB,CAApB;;AACA,oBAAGP,SAAS,IAAIM,eAAb,IAAgCN,SAAS,IAAIS,aAAhD,EAA+D;AAC3DN,kBAAAA,MAAM,CAACX,IAAP,CAAYO,MAAM,CAACT,EAAD,CAAlB;AACD;AACJ;;AACDO,cAAAA,SAAS,GAAGM,MAAZ;AACD;AACF;;AAED,cAAInB,WAAW,IAAID,OAAO,KAAKM,UAA/B,EAA4C;AACxC,gBAAGU,MAAH,EAAW;AACTnB,cAAAA,YAAY,GAAGiB,SAAf;AACAC,cAAAA,QAAQ,GAAG,IAAX;AACD;AACJ;;AAEDjB,UAAAA,QAAQ,CAACW,IAAT,CAAc,oBAAC,OAAD;AACZ,YAAA,GAAG,EAAEF,CADO;AAEZ,YAAA,IAAI,EAAEK,IAFM;AAGZ,YAAA,GAAG,EAAEZ,OAHO;AAIZ,YAAA,QAAQ,EAAEe,QAJE;AAKZ,YAAA,SAAS,EAAED,SALC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAd;AAOAd,UAAAA,OAAO;AACR,SA1CC,MA0CK,IAAGA,OAAO,GAAG,KAAKG,KAAL,CAAWQ,GAAxB,EAA6B;AAAE;AACpCb,UAAAA,QAAQ,CAACW,IAAT,CAAc;AAAI,YAAA,GAAG,EAAEF,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAd;AACAP,UAAAA,OAAO;AACR,SAHM,MAGA;AAAE;AACPF,UAAAA,QAAQ,CAACW,IAAT,CAAc;AAAI,YAAA,GAAG,EAAEF,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAd;AACD;;AAAA;AACF;;AAAA;;AAED,UAAG,CAAC,KAAKJ,KAAL,CAAWa,MAAX,CAAkBW,YAAnB,IAAmC9B,YAAtC,EAAoD;AAClD,aAAK+B,UAAL,CAAgB/B,YAAhB;AACD;;AAED,aACA;AAAK,QAAA,EAAE,EAAC,UAAR;AAAmB,QAAA,SAAS,EAAC,iBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAyB,QAAA,EAAE,EAAC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,EAAE,EAAC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAPF,CADJ,CADF,EAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEE,SADF,CAZA,CADF,CADA;AAoBD;;;;EA/GoBR,S;;AAgHtB;;AAED,IAAMsC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCd,IAAAA,MAAM,EAAEc,KAAK,CAACd;AADoB,GAAZ;AAAA,CAAxB;;AAIA,eAAee,OAAO,CAACF,eAAD,EAAkB;AAACG,EAAAA,gBAAgB,EAAhBA;AAAD,CAAlB,CAAP,CAA6CtC,QAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport DateObj from '../date';\r\n\r\nimport { getDateProps } from '../../utils/date';\r\n\r\nclass Calender extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n// Start is the first day of the month, end is the last.\r\n// Last is the number of days the prior month\r\n\r\n\trender(){\r\n\r\n    let epochStart, epochEnd, todaysEvents\r\n  \r\n\t//If the day of the week falls on the first day of the month, create a Date\r\n    // object, otherwise create an empty table data object\r\n    var tableRow = [];\r\n    var tableRows = [];\r\n    var counter = 0;\r\n\r\n    //Work out if its the current month, and if so provide today's date\r\n    var isThisMonth = false;\r\n    var dateFunc = getDateProps();\r\n\r\n    if(this.props.year === dateFunc.year && this.props.month === dateFunc.month){\r\n        isThisMonth = true\r\n        var todaysDate = dateFunc.todaysDate\r\n    }\r\n    \r\n    for(let i = 1; i < 44; i++) {\r\n        if(tableRow.length > 6) { //Assign all dates to a row\r\n        tableRows.push(<tr key={i}>{tableRow}</tr>);\r\n        tableRow = [];\r\n        };\r\n        if(i === this.props.start) { //Check if the correct first day of the week\r\n            counter++                  //then activate the counter for the loop below\r\n        }\r\n\r\n        if(counter >= 1 && counter <= this.props.end) { //Populate with this month's dates\r\n        \r\n        let date = new Date(this.props.year + \"-\" + this.props.month + \"-\" + counter)\r\n        let dayEvents = []\r\n        let dayToday = false;\r\n\r\n        //Add habits that are supposed to exist on that day to an array and then generate an object for it. \r\n        if(habits) {\r\n          let dateEpoch = Math.floor(date / 1000)\r\n          //Check within range for a user's habits\r\n          if(dateEpoch >= epochStart && dateEpoch <= epochEnd){\r\n            let events = []\r\n            for(let i = 0; i < habits.length; i++) {\r\n              //habitStart\r\n              let habitStart = new Date(habits[i].dateCreated)\r\n              let habitEpochStart = Math.floor(habitStart / 1000)        \r\n              //habitEnd\r\n              let habitEnd = new Date(habits[i].dateToFinish)\r\n              let habitEpochEnd = Math.floor(habitEnd / 1000)\r\n              if(dateEpoch >= habitEpochStart && dateEpoch <= habitEpochEnd) {\r\n                  events.push(habits[i])\r\n                }\r\n            }\r\n            dayEvents = events;\r\n          }\r\n        }\r\n\r\n        if (isThisMonth && counter === todaysDate ) {\r\n            if(habits) {\r\n              todaysEvents = dayEvents;\r\n              dayToday = true;\r\n            }\r\n        } \r\n          \r\n        tableRow.push(<DateObj\r\n          key={i} \r\n          date={date} \r\n          day={counter}\r\n          dayToday={dayToday}\r\n          dayEvents={dayEvents}/>);\r\n\r\n        counter++;\r\n      } else if(counter > this.props.end) { //Start again, with the dates for the next month\r\n        tableRow.push(<td key={i}></td>)\r\n        counter ++;\r\n      } else { //For dates that exist in the previous month.\r\n        tableRow.push(<td key={i}></td>)\r\n      };\r\n    };\r\n\r\n    if(!this.props.habits.todaysHabits && todaysEvents) {\r\n      this.passHabits(todaysEvents)\r\n    }\r\n\r\n    return (\r\n    <div id=\"calender\" className=\"container-fluid\">\r\n      <table className=\"table\" id=\"calender\">\r\n        <thead>\r\n            <tr id=\"daysOfWeek\">\r\n              <th>M</th>\r\n              <th>T</th>\r\n              <th>W</th>\r\n              <th>T</th>\r\n              <th>F</th>\r\n              <th>S</th>\r\n              <th>S</th>\r\n            </tr>\r\n        </thead>\r\n      <tbody>\r\n       {tableRows}\r\n      </tbody>\r\n      </table>\r\n    </div>\r\n    )\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  habits: state.habits \r\n})\r\n\r\nexport default connect(mapStateToProps, {passTodaysHabits})(Calender);\r\n"]},"metadata":{},"sourceType":"module"}