{"ast":null,"code":"import _classCallCheck from \"/home/HDD/Projects/React/calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/HDD/Projects/React/calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/HDD/Projects/React/calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/HDD/Projects/React/calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/HDD/Projects/React/calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/HDD/Projects/React/calendar/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/HDD/Projects/React/calendar/src/components/dashboard/Calendar.js\";\nimport React, { Component } from 'react';\nimport DateObj from '../date';\nimport { getDateProps } from '../../utils/date';\n\nvar Calender =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Calender, _Component);\n\n  function Calender() {\n    var _this;\n\n    _classCallCheck(this, Calender);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calender).call(this));\n    _this.state = {\n      datesSelected: []\n    };\n    _this.handleDateClicked = _this.handleDateClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Calender, [{\n    key: \"handleDateClicked\",\n    value: function handleDateClicked(e, date) {\n      var newDate = date.toString();\n      var originalArray = this.state.datesSelected;\n      e.preventDefault();\n\n      if (originalArray.includes(newDate) === false) {\n        originalArray.push(newDate);\n        this.setState({\n          datesSelected: originalArray\n        });\n      } else {\n        originalArray.splice(originalArray.indexOf(newDate));\n        this.setState({\n          datesSelected: originalArray\n        });\n      } //Pass dates up to Dashboard\n\n\n      this.props.updateDates(this.state.datesSelected);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //If the day of the week falls on the first day of the month, create a Date\n      // object, otherwise create an empty table data object\n      var tableRow = [];\n      var tableRows = [];\n      var counter = 0; //Work out if its the current month, and if so provide today's date\n\n      var isThisMonth = false;\n      var dateFunc = getDateProps();\n\n      if (this.props.year === dateFunc.year && this.props.month === dateFunc.month) {\n        isThisMonth = true;\n        var todaysDate = dateFunc.todaysDate;\n      }\n\n      for (var i = 1; i < 44; i++) {\n        if (tableRow.length > 6) {\n          //Assign all dates to a row\n          tableRows.push(React.createElement(\"tr\", {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, tableRow));\n          tableRow = [];\n        }\n\n        ;\n\n        if (i === this.props.start) {\n          //Check if the correct first day of the week\n          counter++; //then activate the counter for the loop below\n        }\n\n        if (counter >= 1 && counter <= this.props.end) {\n          //Populate with this month's dates\n          var date = new Date(this.props.year + \"-\" + this.props.month + \"-\" + counter);\n          var dayToday = void 0;\n          var selected = false;\n\n          if (this.state.datesSelected.includes(date.toString())) {\n            selected = true;\n          }\n\n          if (isThisMonth && counter === todaysDate) {\n            dayToday = true;\n          } else {\n            dayToday = false;\n          }\n\n          tableRow.push(React.createElement(DateObj, {\n            key: i,\n            date: date,\n            day: counter,\n            dayToday: dayToday,\n            selected: selected,\n            dateClicked: this.handleDateClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }));\n          counter++;\n        } else if (counter > this.props.end) {\n          //Start again, with the dates for the next month\n          tableRow.push(React.createElement(\"td\", {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85\n            },\n            __self: this\n          }));\n          counter++;\n        } else {\n          //For dates that exist in the previous month.\n          tableRow.push(React.createElement(\"td\", {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }));\n        }\n\n        ;\n      }\n\n      ;\n      return React.createElement(\"div\", {\n        id: \"calender\",\n        className: \"container-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        className: \"table\",\n        id: \"calender\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        id: \"daysOfWeek\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"M\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"T\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"W\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"T\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"F\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"S\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"S\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, tableRows)));\n    }\n  }]);\n\n  return Calender;\n}(Component);\n\n;\nexport default Calender;","map":{"version":3,"sources":["/home/HDD/Projects/React/calendar/src/components/dashboard/Calendar.js"],"names":["React","Component","DateObj","getDateProps","Calender","state","datesSelected","handleDateClicked","bind","e","date","newDate","toString","originalArray","preventDefault","includes","push","setState","splice","indexOf","props","updateDates","tableRow","tableRows","counter","isThisMonth","dateFunc","year","month","todaysDate","i","length","start","end","Date","dayToday","selected"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport DateObj from '../date';\r\n\r\nimport { getDateProps } from '../../utils/date';\r\n\r\nclass Calender extends Component {\r\n\tconstructor() {\r\n\t\tsuper() \r\n\t\tthis.state = {\r\n\t\t\tdatesSelected: [] \r\n\t\t}\r\n\t\tthis.handleDateClicked = this.handleDateClicked.bind(this)\r\n\t}\r\n\r\n\thandleDateClicked(e, date) {\r\n\t\tvar newDate = date.toString()\r\n\t\tvar originalArray = this.state.datesSelected\r\n\r\n\t\te.preventDefault()\r\n\t\tif(originalArray.includes(newDate) === false) {\r\n\t\t\toriginalArray.push(newDate)\r\n\t\t\tthis.setState({\r\n\t\t\t\tdatesSelected: originalArray\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\toriginalArray.splice( originalArray.indexOf(newDate) )\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tdatesSelected: originalArray\r\n\t\t\t})\r\n\t\t}\r\n\t\t//Pass dates up to Dashboard\r\n\t\tthis.props.updateDates(this.state.datesSelected)\r\n\t}\r\n\t\r\n\trender(){\r\n\r\n\t//If the day of the week falls on the first day of the month, create a Date\r\n    // object, otherwise create an empty table data object\r\n    var tableRow = [];\r\n    var tableRows = [];\r\n    var counter = 0;\r\n\r\n    //Work out if its the current month, and if so provide today's date\r\n    var isThisMonth = false;\r\n    var dateFunc = getDateProps();\r\n\r\n    if(this.props.year === dateFunc.year && this.props.month === dateFunc.month){\r\n        isThisMonth = true\r\n        var todaysDate = dateFunc.todaysDate\r\n    }\r\n    \r\n    for(let i = 1; i < 44; i++) {\r\n        if(tableRow.length > 6) { //Assign all dates to a row\r\n        tableRows.push(<tr key={i}>{tableRow}</tr>);\r\n        tableRow = [];\r\n        };\r\n        if(i === this.props.start) { //Check if the correct first day of the week\r\n            counter++                  //then activate the counter for the loop below\r\n        }\r\n\r\n        if(counter >= 1 && counter <= this.props.end) { //Populate with this month's dates\r\n        \r\n\t\t\tlet date = new Date(this.props.year + \"-\" + this.props.month + \"-\" + counter)\r\n\t\t\tlet dayToday;\r\n\t\t\tvar selected = false;\r\n\t\t\tif(this.state.datesSelected.includes(date.toString())) {\r\n\t\t\t\tselected = true;\r\n\t\t\t}\r\n\t\t\tif(isThisMonth && counter === todaysDate) {\r\n\t\t\t\tdayToday = true;\r\n\t\t\t} else {\r\n\t\t\t\tdayToday = false\r\n\t\t\t}\r\n\t\t\ttableRow.push(<DateObj\r\n\t\t\tkey={i} \r\n\t\t\tdate={date} \r\n\t\t\tday={counter}\r\n\t\t\tdayToday={dayToday}\r\n\t\t\tselected={selected}\r\n\t\t\tdateClicked={this.handleDateClicked}/>);\r\n\r\n        counter++;\r\n      } else if(counter > this.props.end) { //Start again, with the dates for the next month\r\n        tableRow.push(<td key={i}></td>)\r\n        counter ++;\r\n      } else { //For dates that exist in the previous month.\r\n        tableRow.push(<td key={i}></td>)\r\n      };\r\n    };\r\n    \r\n\treturn (\r\n    <div id=\"calender\" className=\"container-fluid\">\r\n      <table className=\"table\" id=\"calender\">\r\n        <thead>\r\n            <tr id=\"daysOfWeek\">\r\n              <th>M</th>\r\n              <th>T</th>\r\n              <th>W</th>\r\n              <th>T</th>\r\n              <th>F</th>\r\n              <th>S</th>\r\n              <th>S</th>\r\n            </tr>\r\n        </thead>\r\n      <tbody>\r\n       {tableRows}\r\n      </tbody>\r\n      </table>\r\n    </div>\r\n    )\r\n  };\r\n};\r\n\r\nexport default Calender; \r\n"]},"metadata":{},"sourceType":"module"}